#!/bin/bash

# thanks to https://news.ycombinator.com/item?id=18903234
function cheat() {
  curl cht.sh/$1
}

# extract archives - use: extract <file>
# based on http://dotfiles.org/~pseup/.bashrc
function extract() {
  if [ -f "$1" ] ; then
    local filename=$(basename "$1")
    local foldername="${filename%%.*}"
    local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
    local didfolderexist=false
    if [ -d "$foldername" ]; then
      didfolderexist=true
      read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
      echo
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        return
      fi
    fi
    mkdir -p "$foldername" && cd "$foldername"
    case $1 in
      *.tar.bz2) tar xjf "$fullpath" ;;
      *.tar.gz) tar xzf "$fullpath" ;;
      *.tar.xz) tar Jxvf "$fullpath" ;;
      *.tar.Z) tar xzf "$fullpath" ;;
      *.tar) tar xf "$fullpath" ;;
      *.taz) tar xzf "$fullpath" ;;
      *.tb2) tar xjf "$fullpath" ;;
      *.tbz) tar xjf "$fullpath" ;;
      *.tbz2) tar xjf "$fullpath" ;;
      *.tgz) tar xzf "$fullpath" ;;
      *.txz) tar Jxvf "$fullpath" ;;
      *.zip) unzip "$fullpath" ;;
      *.7z) 7z x "$fullpath" ;;  # requires brew p7zip!
      *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# find shorthand
function f() {
  find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# git archive branch - tag then delete
function git-archive() {
  BRANCHNAME="$1"

  echo ${BRANCHNAME}
  git tag archive/${BRANCHNAME} origin/${BRANCHNAME}
  git push origin --delete ${BRANCHNAME}
  git branch -d ${BRANCHNAME}
}

# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}

function localip() {
  function _localip() { echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
  export -f _localip
  local purple="\x1B\[35m" reset="\x1B\[m"
  networksetup -listallhardwareports | \
    sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
    sed -r "s/Device: (en.*)$/_localip \1/e" | \
    sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
    sed -r "s/(VLAN Configurations)|==*//g"
}

# written by craigruks
# toggles showing/hiding hidden files, auto restarts Finder as well
function hidden_toggle() {
  SHOW=0
  NEW_STATE="Files now hidden"
  OLD_STATE=`defaults read com.apple.finder AppleShowAllFiles`

  if [ "${OLD_STATE}" -eq "0" ]; then
    NEW_STATE="Files now showing"
    SHOW=1
  fi

  defaults write com.apple.finder AppleShowAllFiles "${SHOW}"
  killall "Finder" > /dev/null 2>&1

  echo "${NEW_STATE}"
}

# spoof MAC address for security
# based on http://osxdaily.com/2012/03/01/change-mac-address-os-x/
# run `sudo ifconfig en0 ether xx:xx:xx:xx:xx:xx` to reset
function spoofmac () {
  openssl rand -hex 1 | \
  tr '[:lower:]' '[:upper:]' | \
  xargs echo "obase=2;ibase=16;" | \
  bc | \
  cut -c1-6 | \
  sed 's/$/00/' | \
  xargs echo "obase=16;ibase=2;" | \
  bc | \
  sed "s/$/:$(openssl rand -hex 5 | \
  sed 's/\(..\)/\1:/g; s/.$//' | \
  tr '[:lower:]' '[:upper:]')/" | \
  xargs sudo ifconfig en0 ether;
}

# Load node virtual env
function load_nvm() {
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" >> /dev/null
}

# Load python virtual env (python3)
function load_pyenv() {
  # helpful links for install, best practices
  #   https://docs.python-guide.org/starting/install3/osx/
  #   https://docs.python-guide.org/dev/virtualenvs/#virtualenvironments-ref
  #   https://docs.brew.sh/Homebrew-and-Python

  # add before pip if needed
  pip="CFLAGS=-I$(brew --prefix)/include LDFLAGS=-L$(brew --prefix)/lib pip"

  export PYENV_VIRTUALENV_DISABLE_PROMPT=1
  eval "$(pyenv init -)"
}

# Load ruby virtual env
function load_rbenv() {
  # to use,
  # create .ruby-version (2.3.1 for example)
  # make `Gemfile`
  # `gem install bundle && bundle install`

  # oh-my-zsh
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

  eval "$(rbenv init -)"
  export RBENV="true"  # used in .bash_prompt to know when to show ruby version
}

# Kill process on a port (useful when stuck)
function terminate() {
  local port=$1
  lsof -P | grep ':${port}' | awk '{print $2}' | xargs kill -9
}

# Decode \x{ABCD}-style Unicode escape sequences
# from troyxmccall/dotfiles
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
  # print a newline unless weâ€™re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# whois a domain or a URL
function whois() {
  local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
  if [ -z $domain ] ; then
    domain=$1
  fi
  echo "Getting whois record for: $domain â€¦"

  # avoid recursion
  # this is the best whois server
  # strip extra fluff
  /usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}
