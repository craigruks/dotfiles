#!/bin/bash

# This prompt inspired by gf3, sindresorhus, alrra, mathiasbynens, paulirish

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi


set_prompts() {

    local black="" blue="" bold="" cyan="" green="" orange="" \
          purple="" red="" reset="" white="" yellow=""

    local dateCmd=""

    if [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null; then

        tput sgr0 # Reset colors

        bold=$(tput bold)
        reset=$(tput sgr0)

        # Solarized colors
        # (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)
        black=$(tput setaf 0)
        blue=$(tput setaf 33)
        cyan=$(tput setaf 37)
        green=$(tput setaf 190)
        orange=$(tput setaf 172)
        purple=$(tput setaf 141)
        red=$(tput setaf 124)
        violet=$(tput setaf 61)
        magenta=$(tput setaf 9)
        white=$(tput setaf 8)
        yellow=$(tput setaf 136)

    else

        bold=""
        reset="\e[0m"

        black="\e[1;30m"
        blue="\e[1;34m"
        cyan="\e[1;36m"
        green="\e[1;32m"
        orange="\e[1;33m"
        purple="\e[1;35m"
        red="\e[1;31m"
        magenta="\e[1;31m"
        violet="\e[1;35m"
        white="\e[1;37m"
        yellow="\e[1;33m"

    fi

    # original pulled from https://gist.github.com/shmatov/3508983

    function __git_dirty {
      git diff --quiet HEAD &>/dev/null
      [ $? == 1 ] && echo "*"
    }

    function __git_branch {
      # check if we're in a git repo. (fast)
      git rev-parse --is-inside-work-tree &>/dev/null || return

      # check for what branch we're on. (fast)
      #   if… HEAD isn’t a symbolic ref (typical branch),
      #   then… get a tracking remote branch or tag
      #   otherwise… get the short SHA for the latest commit
      #   lastly just give up.
      branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
          git describe --all --exact-match HEAD 2> /dev/null || \
          git rev-parse --short HEAD 2> /dev/null || \
          echo '(unknown)')";

      echo " ${branchName}"
    }

    function __my_rvm_ruby_version() {
      local env=$(basename "$GEM_HOME" | awk -F'-' '{print $2} ')
      [ "$env" != "" ] && echo " $env"
    }

    function __virtualenv() {
      local env=$(basename "$VIRTUAL_ENV")
      [ "$env" != "" ] && echo " $env"
    }

    function __node() {
      # return if no nvm existence
      hash nvm 2>/dev/null || return

      if hash node 2>/dev/null; then
        local v=$(node -v)
      fi
      [ "$v" != "" ] && echo " ${v:1}"
    }



    # ------------------------------------------------------------------
    # | Prompt string                                                  |
    # ------------------------------------------------------------------

    PS1="\[$bold$green\]\w"
    PS1+="\[${cyan}\]\$(__node)"
    PS1+="\[${blue}\]\$(__virtualenv)"
    PS1+="\[${violet}\]\$(__my_rvm_ruby_version)"
    PS1+="\[${purple}\]\$(__git_branch)"
    PS1+="\[${orange}\]\$(__git_dirty)"
    PS1+="\[$reset$white\] $ \[$reset\]"

    export PS1

    # ------------------------------------------------------------------
    # | Subshell prompt string                                         |
    # ------------------------------------------------------------------

    export PS2="⚡ "

    # ------------------------------------------------------------------
    # | Debug prompt string  (when using `set -x`)                     |
    # ------------------------------------------------------------------

    # When debugging a shell script via `set -x` this tricked-out prompt is used.

    # The first character (+) is used and repeated for stack depth
    # Then, we log the current time, filename and line number, followed by function name, followed by actual source line

    # FWIW, I have spent hours attempting to get time-per-command in here, but it's not possible. ~paul
    export PS4='+ \011\e[1;30m\t\011\e[1;34m${BASH_SOURCE}\e[0m:\e[1;36m${LINENO}\e[0m \011 ${FUNCNAME[0]:+\e[0;35m${FUNCNAME[0]}\e[1;30m()\e[0m:\011\011 }'


    # shoutouts:
    #   https://github.com/dholm/dotshell/blob/master/.local/lib/sh/profile.sh is quite nice.
    #   zprof is also hot.

}



set_prompts
unset set_prompts
